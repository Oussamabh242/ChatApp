generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String     @id @default(cuid())
  fullName     String     @db.VarChar(60)
  email        String     @unique @db.VarChar(60)
  password     String     @db.VarChar(60)
  verified     Boolean    @default(false)
  recived      Request[]  @relation("RecivedRequests")
  sent         Request[]  @relation("SentRequests")
  chats        ChatUser[]
  messages     Message[]
  friendships  Friend[]   @relation("recived")
  relationship Friend[]   @relation("sent")
}

model Request {
  id String @id @default(cuid())

  sender   User   @relation("SentRequests", fields: [senderId], references: [id])
  senderId String

  reciver   User   @relation("RecivedRequests", fields: [recivedId], references: [id])
  recivedId String

  status RequestStatus @default(pending)
  date   DateTime      @default(now()) @db.Timestamp()
}

model Chat {
  id       String     @id @default(cuid())
  name     String     @db.VarChar(60)
  date     DateTime   @default(now()) @db.Timestamp()
  users    ChatUser[]
  messages Message[]
}

model ChatUser {
  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@id([chatId, userId])
}

model Message {
  id   String @id @default(cuid())
  text String @db.VarChar(100)

  sender   User   @relation(fields: [senderId], references: [id])
  senderId String

  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String

  DateSent DateTime @default(now())
}

model Friend {
  id      String @id @default(cuid())
  reciver User   @relation("recived", fields: [user1], references: [id])
  user1   String

  sender User   @relation("sent", fields: [user2], references: [id])
  user2  String
}

enum RequestStatus {
  pending
  confirmed
}
